swagger: '2.0'
info:
  description: This is the RESTful API for managing Sessions in WSO2 Identity Server
  version: '1.0.0'
  title: WSO2 Identity Server - Session Management API
  contact:
    name: 'WSO2 Identity Server'
    url: 'https://wso2.com/identity-and-access-management/'
    email: 'architecture@wso2.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

schemes:
 - https
# host: is.wso2.com
# basePath: /t/{tenant-domain}/api/identity/1.0.0/

# tags are used for organizing operations
tags:
- name: management
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
security:
  - OAuth2: []
  - BasicAuth: []

paths:
  /{user-id}/sessions:
    get:
      tags:
        - management
      description: Retrieve information related to the active sessions of the user.
      summary: get active sessions
      operationId: getSessionsByUserId
      parameters:
        - $ref: '#/parameters/userIdPathParam'
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved session information
          schema:
            $ref: '#/definitions/Sessions'
        400:
            $ref: '#/responses/InvalidInput'
        401:
            $ref: '#/responses/Unauthorized'
        404:
            $ref: '#/responses/NotFound'
        500:
            $ref: '#/responses/ServerError'
    delete:
      tags:
        - management
      description: Delete all the sessions of the given in user
      summary: Terminate all sessions
      operationId: terminateSessionsByUserId
      parameters:
        - $ref: '#/parameters/userIdPathParam'
      responses:
        200:
            $ref: '#/responses/Deleted'
        400:
            $ref: '#/responses/InvalidInput'
        401:
            $ref: '#/responses/Unauthorized'
        404:
            $ref: '#/responses/NotFound'
        500:
            $ref: '#/responses/ServerError'

  /me/sessions:
    get:
      tags:
        - developers
      description: Retrieve information related to the active sessions of the logged in user.
      summary: get active sessions
      operationId: getSessionsOfLoggedInUser
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved session information
          schema:
            $ref: '#/definitions/Sessions'
        401:
            $ref: '#/responses/Unauthorized'
        404:
            $ref: '#/responses/NotFound'
        500:
            $ref: '#/responses/ServerError'

    delete:
      tags:
        - developers
      description: Delete all the sessions of the logged in user
      summary: Terminate all sessions
      operationId: terminateSessionsByLoggedInUser
      responses:
        200:
            $ref: '#/responses/Deleted'
        401:
            $ref: '#/responses/Unauthorized'
        404:
            $ref: '#/responses/NotFound'
        500:
            $ref: '#/responses/ServerError'

  /{user-id}/sessions/{session-id}:
    delete:
      tags:
        - management
      description: Terminate a given session of a given user
      summary: Terminate a session
      operationId: terminateSessionBySessionId
      parameters:
        - $ref: '#/parameters/userIdPathParam'
        - $ref: '#/parameters/sessionIdPathParam'
      responses:
        200:
            $ref: '#/responses/Deleted'
        400:
            $ref: '#/responses/InvalidInput'
        401:
            $ref: '#/responses/Unauthorized'
        404:
            $ref: '#/responses/NotFound'
        500:
            $ref: '#/responses/ServerError'

  /me/sessions/{session-id}:
    delete:
      tags:
        - developers
      description: Terminate a given session of the logged in user
      summary: Terminate a session
      operationId: terminateSessionByLoggedInUser
      parameters:
        - $ref: '#/parameters/sessionIdPathParam'
      responses:
        200:
            $ref: '#/responses/Deleted'
        400:
            $ref: '#/responses/InvalidInput'
        401:
            $ref: '#/responses/Unauthorized'
        404:
            $ref: '#/responses/NotFound'
        500:
            $ref: '#/responses/ServerError'

#-----------------------------------------------------
# Descriptions of common responses
#-----------------------------------------------------
responses:
  NotFound:
    description: The specified resource is not found
    schema:
      $ref: '#/definitions/Error'
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  ServerError:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'
  InvalidInput:
    description: Invalid input request
    schema:
      $ref: '#/definitions/Error'
  Conflict:
    description: Element Already Exists
    schema:
      $ref: '#/definitions/Error'
  Created:
    description: Item Created
  OK:
    description: OK
  Deleted:
    description: Item Deleted

definitions:
  #-----------------------------------------------------
  # The Session Response  object
  #-----------------------------------------------------
  Application:
    type: object
    required:
      - subject
      - appName
    properties:
      subject:
        type: string
        description: Username for the application
        example: apiuser01
      appName:
        type: string
        description: Name of the application
        example: sampleApp
      appId:
        type: string
        description: ID of the application
        example: '012'

  #-----------------------------------------------------
  # The Session Response  object
  #-----------------------------------------------------
  Session:
    type: object
    properties:
      applications:
        type: array
        description: List of active applications in the session
        items:
          $ref: '#/definitions/Application'
      userAgent:
        type: string
        description: User agent of the session
        example: 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1'
      ip:
        type: string
        description: IP address of the session
        example: '172.95.192.63'
      loginTime:
        type: string
        description: Login time of the session
        example: '1560412617'
      lastAccessTime:
        type: string
        description: Last access time of the session
        example: '1560416196'
      sessionId:
        type: string
        description: ID of the session
        example: '8d9806d1-4efc-483e-a96a-a0fa77d4328b'

  #-----------------------------------------------------
  # The Sessions Response  object
  #-----------------------------------------------------
  Sessions:
    type: object
    required:
      - userId
    properties:
      userId:
        type: string
        example: '00000001'
      sessions:
        type: array
        description: List of active sessions
        items:
          $ref: '#/definitions/Session'

  #-----------------------------------------------------
  # Error response  object
  #-----------------------------------------------------
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        example: "some_error_code"
      message:
        type: string
        example: "Some Error Message"
      description:
        type: string
        example: "Some Error Description"

  # Parameter definitions
parameters:
    userIdPathParam:
      in: path
      name: user-id
      description: id of the user
      required: true
      type: string
    sessionIdPathParam:
      in: path
      name: session-id
      description: id of the session
      required: true
      type: string
  # Security Definitions
securityDefinitions:
  BasicAuth:
    type: basic
  # ClientCertificate:
  #   type: custom
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://localhost:9443/oauth/authorize
    tokenUrl: https://localhost:9443/oauth/token
    scopes:
      read: Grants read access
      write: Grants write access
      admin: Grants read and write access to administrative information