swagger: '2.0'
info:
  description: This is the RESTful API for managing Challenge Questions in WSO2 Identity Server
  version: "1.0.0"
  title: WSO2 Identity Server - Challenge Question API
  contact:
    name: "WSO2 Identity Server"
    url: "https://wso2.com/identity-and-access-management/"
    email: "architecture@wso2.com"
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

schemes:
 - https

# tags are used for organizing operations
tags:
- name: management
  description: Secured Admin-only calls
- name: developement
  description: Operations available to regular developement

# applicable authentication mechanisms
security:
  - OAuth2: []
  - BasicAuth: []

paths:
  /{user-id}/challenges:
    get:
      tags:
        - developement
      summary: searches challenges available for a user
      operationId: getChallengesForAUser
      description: |
        Search for
        available challenges in the system for the user.
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeSet'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
  /{user-id}/challenge-answers:
    post:
      tags:
        - developement
      summary: "answers a new challenge question"
      operationId: addChallengeAnswersOfAUser
      description: |
        Adds a new challenge question answer to the system for a specific user.
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challenge-answer
          description: challenge question with answer
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/ServerError'
    get:
      tags:
        - developement
      summary: "get user's challenge answers"
      operationId: getAnsweredChallengesOfAUser
      description: |
        Get answered challenges in the system for a specific user.
      parameters:
        - $ref: '#/parameters/usernamePathParams'

      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/UserChallengeAnswerResponse'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    put:
      tags:
        - developement
      summary: "answers new challenge question combination"
      operationId: updateChallengeAnswersOfAUser
      description: |
        Addsnew challenge question answers to the system for a specific user.
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challengeAnswers
          description: set of challenge question with answer
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    delete:
      tags:
        - developement
      summary: "removes challenge question answers"
      operationId: deleteChallengeAnswersOfAUser
      description: |
        Removes existing challenge question answers of a user
      parameters:
        - $ref: '#/parameters/usernamePathParams'
      responses:
        200:
          $ref: '#/responses/Deleted'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
  /{user-id}/challenge-answers/{challenge-set-id}:
    post:
      tags:
        - developement
      summary: "answers a new challenge question"
      operationId: addChallengeAnswerOfAUser
      description: |
        Update new challenge question answer to the system for a specific user.
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challengeAnswer
          description: challenge-question with answer
          schema:
            $ref: '#/definitions/UserChallengeAnswer'
      responses:
        200:
          $ref: '#/responses/OK'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/ServerError'
    put:
      tags:
        - developement
      summary: "update answer of a challenge question"
      operationId: updateChallengeAnswerOfAUser
      description: |
        Update challenge question answer of a specific user.
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challengeAnswer
          description: challenge-question with answer
          schema:
            $ref: '#/definitions/UserChallengeAnswer'
      responses:
        200:
          $ref: '#/responses/OK'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    delete:
      tags:
        - developement
      summary: "removes a challenge question answer"
      operationId: deleteChallengeAnswerOfAUser
      description: |
        Removes existing challenge question answers of a user
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
      responses:
        200:
          $ref: '#/responses/Deleted'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
  /me/challenges:
    get:
      tags:
        - developement
      summary: searches challenge-question for authenticated user
      operationId: getChallengesForLoggedInUser
      description: |
        Retrieve the
        available challenge-question in the system for the authenticated user
      parameters:
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeSet'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        500:
          $ref: '#/responses/ServerError'
  /me/challenge-answers:
    post:
      tags:
        - developement
      summary: "answers a new challenge question"
      operationId: addChallengeAnswersForLoggedInUser
      description: |
        Adds a new challenge question answer to the system
      parameters:
        - in: body
          name: challenge-answer
          description: challenge-question with answer
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/ServerError'
    get:
      tags:
        - developement
      summary: "get user's challenge answers"
      operationId: getAnsweredChallengesOfLoggedInUser
      description: |
        Get answered challenges in the system for a specific user.
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/UserChallengeAnswerResponse'
        401:
          $ref: '#/responses/Unauthorized'
        500:
          $ref: '#/responses/ServerError'
    put:
      tags:
        - developement
      summary: "answers new challenge question combination"
      operationId: updateChallengeAnswersOfLoggedInUser
      description: |
        Addsnew challenge question answers to the system for logged In user.
      parameters:
        - in: body
          name: challengeAnswers
          description: set of challenge question with answer
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        200:
          $ref: '#/responses/OK'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    delete:
      tags:
        - developement
      summary: "removes challenge question answers"
      operationId: deleteChallengeAnswersOfLoggedInUser
      description: |
        Removes an existing challenge question answers of the authenticated user
      responses:
        200:
          $ref: '#/responses/Deleted'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
  /me/challenge-answers/{challenge-set-id}:
    post:
      tags:
        - developement
      summary: "answers a new challenge question"
      operationId: addChallengeAnswerOfLoggedInUser
      description: |
        Adds a new challenge question answer to the system for loggedin user.
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - in: body
          name: challengeAnswer
          description: challenge-question with answer
          schema:
            $ref: '#/definitions/UserChallengeAnswer'
      responses:
        200:
          $ref: '#/responses/OK'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/ServerError'
    put:
      tags:
        - developement
      summary: "answers a new challenge question"
      operationId: updateChallengeAnswerOfLoggedInUser
      description: |
        Update challenge answer in a specific challenge for authenticated user.
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - in: body
          name: challenge-answer
          description: challenge-question with answer
          schema:
           $ref: '#/definitions/UserChallengeAnswer'
      responses:
        200:
          $ref: '#/responses/OK'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    delete:
      tags:
        - developement
      summary: "removes a challenge question answer"
      operationId: deleteChallengeAnswerOfLoggedInUser
      description: |
        Removes existing challenge question answers of authenticated user
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
      responses:
        200:
          $ref: '#/responses/Deleted'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
parameters:
    usernamePathParams:
      in: path
      name: user-id
      required: true
      type: string
      description: username of the user
    questionSetIdPathParam:
      in: path
      name: challenge-set-id
      required: true
      type: string
      description: Challenge Question set Id
    questionIdPathParam:
      in: path
      name: question-id
      required: true
      type: string
      description: Challenge Question Id
    localeQueryParam:
      in: query
      name: locale
      description: pass an optional search string for looking up challenge-question based on locale
      required: false
      type: string

definitions:
    #-----------------------------------------------------
    # ChallengeSet Properties object
    #-----------------------------------------------------
  ChallengeSet:
    type: object
    required:
      - challengeSetId
      - questions
    properties:
      questionSetId:
        type: string
        example: challengeQuestion1
      questions:
        type: array
        items:
          $ref: '#/definitions/ChallengeQuestion'
  #-----------------------------------------------------
  # ChallengeQuestion Properties object
  #-----------------------------------------------------
  ChallengeQuestion:
    type: object
    required:
      - question
    properties:
      locale:
        type: string
        example: en_US
      question:
        type: string
        example: What is your favorite travel destination ?
      questionId:
        type: string
        example: question1
  #-----------------------------------------------------
  # ChallengeAnswer Properties object
  #-----------------------------------------------------
  ChallengeAnswer:
    type: object
    required:
      - answer
      - challenge
    properties:
      questionSetId:
        type: string
        example: challengeQuestionSet1
      challengeQuestion:
          $ref: '#/definitions/ChallengeQuestion'
      answer:
        type: string
        example: Colombo
  #-----------------------------------------------------
  # UserChallengeAnswer Properties object
  #-----------------------------------------------------
  UserChallengeAnswer:
    type: object
    required:
      - answer
      - challenge
    properties:
      challengeQuestion:
          $ref: '#/definitions/ChallengeQuestion'
      answer:
        type: string
        example: Colombo
  #-----------------------------------------------------
  # UserChallengeAnswerResponse Properties object
  #-----------------------------------------------------
  UserChallengeAnswerResponse:
    type: object
    required:
      - answer
      - questionSetId
      - question
    properties:
      questionSetId:
        type: string
        example: challengeQuestionSet1
      question:
        type: string
        example: What is your favorite travel destination ?
      answer:
        type: string
        example: Colombo
  #-----------------------------------------------------
  # The Error Response  object
  #-----------------------------------------------------
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        example: "some_error_code"
      message:
        type: string
        example: "Some Error Message"
      description:
        type: string
        example: "Some Error Description"
      ref:
        type: string
        example: "Some Correlation for Error Instance"
securityDefinitions:
  BasicAuth:
    type: basic
  # ClientCertificate:
  #   type: custom
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://localhost:9443/oauth/authorize
    tokenUrl: https://localhost:9443/oauth/token
    scopes:
      read: Grants read access
      write: Grants write access
      admin: Grants read and write access to administrative information
#-----------------------------------------------------
# Descriptions of common responses
#-----------------------------------------------------
responses:
  NotFound:
    description: The specified resource is not found
    schema:
      $ref: '#/definitions/Error'
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  ServerError:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'
  InvalidInput:
    description: Invalid input request
    schema:
      $ref: '#/definitions/Error'
  Conflict:
    description: Element Already Exists
    schema:
      $ref: '#/definitions/Error'
  Created:
    description: Item Created
  OK:
    description: OK
  Deleted:
    description: Item Deleted

host: localhost:9443
basePath: /api/users/v1
